<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Apache Commons IO的19年后门：一次误报分析</title>
      <link href="/2025/06/09/apache-commons-io/"/>
      <url>/2025/06/09/apache-commons-io/</url>
      
        <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Apache Commons IO库中的<code>FileSystemUtils.java</code>因使用<code>Runtime.getRuntime().exec()</code>调用系统命令被反病毒软件误报为恶意代码。该实现存在19年直到2024年才重构，是经典的误报案例。</p><h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>在对Minecraft插件进行安全扫描时，发现<code>org.apache.commons.io.FileSystemUtils</code>存在以下”可疑”行为：</p><ul><li><code>Runtime.getRuntime().exec(params)</code>调用</li><li>执行<code>cmd.exe</code>命令</li></ul><p>初步怀疑存在后门，但进一步分析发现异常：</p><ol><li>反病毒软件仅报告单一可疑点，不符合恶意软件特征</li><li>代码未混淆，如有恶意意图过于明显</li><li>Apache官方仓库搜索无相关敏感字符串</li></ol><h2 id="根因分析"><a href="#根因分析" class="headerlink" title="根因分析"></a>根因分析</h2><p>通过Git历史追溯，发现问题源于Apache Commons IO的历史实现：</p><h3 id="2005-2024：系统命令实现"><a href="#2005-2024：系统命令实现" class="headerlink" title="2005-2024：系统命令实现"></a>2005-2024：系统命令实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Windows平台</span></span><br><span class="line">Process <span class="title function_">openProcess</span><span class="params">(<span class="keyword">final</span> String[] cmdArray)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> Runtime.getRuntime().exec(cmdArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">freeSpaceWindows</span><span class="params">(<span class="keyword">final</span> String pathStr, <span class="keyword">final</span> Duration timeout)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; lines = performCommand(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/C&quot;</span>, <span class="string">&quot;dir /a /-c \&quot;&quot;</span> + path + <span class="string">&quot;\&quot;&quot;</span> &#125;, </span><br><span class="line">        Integer.MAX_VALUE, timeout);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unix平台  </span></span><br><span class="line"><span class="type">long</span> <span class="title function_">freeSpaceUnix</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">final</span> <span class="type">boolean</span> kb, <span class="keyword">final</span> <span class="type">boolean</span> posix, <span class="keyword">final</span> Duration timeout)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> String[] cmdAttribs = flags.length() &gt; <span class="number">1</span> ? </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; DF, flags, pathStr &#125; : </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; DF, pathStr &#125;;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2024后：NIO-2实现"><a href="#2024后：NIO-2实现" class="headerlink" title="2024后：NIO.2实现"></a>2024后：NIO.2实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getFreeSpace</span><span class="params">(<span class="keyword">final</span> String pathStr)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(Objects.requireNonNull(pathStr, <span class="string">&quot;pathStr&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Files.getFileStore(path.toAbsolutePath()).getUsableSpace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(path.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术对比"><a href="#技术对比" class="headerlink" title="技术对比"></a>技术对比</h2><table><thead><tr><th>维度</th><th>旧实现</th><th>新实现</th></tr></thead><tbody><tr><td><strong>方法</strong></td><td>系统命令调用</td><td>NIO.2 API</td></tr><tr><td><strong>平台依赖</strong></td><td>强依赖(Windows&#x2F;Unix分支)</td><td>平台无关</td></tr><tr><td><strong>安全性</strong></td><td>命令注入风险</td><td>类型安全</td></tr><tr><td><strong>性能</strong></td><td>进程创建开销</td><td>直接系统调用</td></tr><tr><td><strong>误报</strong></td><td>高(敏感API)</td><td>无</td></tr></tbody></table><h2 id="误报原因"><a href="#误报原因" class="headerlink" title="误报原因"></a>误报原因</h2><ol><li><strong>模式匹配局限性</strong>：静态分析工具基于签名检测<code>Runtime.exec()</code>等敏感API</li><li><strong>缺乏语义理解</strong>：无法区分合法系统调用与恶意行为</li><li><strong>历史包袱</strong>：19年的向后兼容需求导致不安全实现长期存在</li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><h3 id="对开发者"><a href="#对开发者" class="headerlink" title="对开发者"></a>对开发者</h3><ul><li>优先使用现代API（NIO.2 &gt; Runtime.exec()）</li><li>理解安全工具的检测机制和局限性</li><li>重视代码的安全性演进</li></ul><h3 id="对安全分析"><a href="#对安全分析" class="headerlink" title="对安全分析"></a>对安全分析</h3><ul><li>静态分析结果需人工验证</li><li>结合代码历史和上下文分析</li><li>关注误报模式，建立白名单机制</li></ul><h3 id="对项目维护"><a href="#对项目维护" class="headerlink" title="对项目维护"></a>对项目维护</h3><ul><li>及时更新依赖到安全版本</li><li>定期审查历史技术债务</li><li>平衡兼容性与安全性</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这起误报揭示了几个重要问题：</p><ol><li><strong>API演进的必要性</strong>：Java NIO.2引入的动机之一就是替代不安全的传统实现</li><li><strong>安全工具的双刃剑效应</strong>：过度依赖自动化检测可能导致误判</li><li><strong>开源项目的历史包袱</strong>：向后兼容需求与安全性改进之间的平衡</li></ol><p>Apache Commons IO团队最终选择重构而非简单修复，体现了对安全性和代码质量的重视。这个案例提醒我们：<strong>技术选型需要考虑长远的安全影响，而不仅仅是功能实现</strong>。</p><hr><p><em>参考资料：</em></p><ul><li><a href="https://github.com/apache/commons-io">Apache Commons IO GitHub仓库</a></li><li><a href="https://github.com/apache/commons-io/blob/bce1088fde529389cae8ebc619b9d0274e3a45af/src/main/java/org/apache/commons/io/FileSystemUtils.java">重构前FileSystemUtils.java</a></li><li><a href="https://github.com/apache/commons-io/blob/59129bcf283ffa5a46d0872e173a4e037575c581/src/main/java/org/apache/commons/io/FileSystemUtils.java">重构后FileSystemUtils.java</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> java </tag>
            
            <tag> commons-io </tag>
            
            <tag> secure </tag>
            
            <tag> backdoor </tag>
            
            <tag> bug </tag>
            
            <tag> exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/06/09/hello-world/"/>
      <url>/2025/06/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
